server {
    port = 8080
    port = ${?SERVER_PORT}
}

database {
    jdbcUrl = "jdbc:postgresql://localhost:5432/decentrifi"
    jdbcUrl = ${?DB_JDBC_URL}
    username = "decentrifi"
    username = ${?DB_USERNAME}
    password = "decentrifi"
    password = ${?DB_PASSWORD}
    maxPoolSize = 5
    maxPoolSize = ${?DB_MAX_POOL_SIZE}
}

# Multi-network configuration
networks {
    # Ethereum Mainnet
    ethereum {
        rpcUrl = "https://mainnet.infura.io/v3/YOUR_INFURA_KEY"
        rpcUrl = ${?ETH_RPC_URL}
        
        startBlock = 22389515
        startBlock = ${?ETH_START_BLOCK}
        
        # Ingestion settings
        batchSize = 1000
        batchSize = ${?ETH_BATCH_SIZE}
        eventBatchSize = 2000
        eventBatchSize = ${?ETH_EVENT_BATCH_SIZE}
        pollingInterval = 15000
        pollingInterval = ${?ETH_POLLING_INTERVAL}
        
        # Network characteristics
        blockTime = 12  # Average block time in seconds
    }
    
    # Add other networks as needed - examples:
    
    # Polygon Mainnet
    # polygon {
    #     rpcUrl = "https://polygon-rpc.com"
    #     rpcUrl = ${?POLYGON_RPC_URL}
    #     batchSize = 500
    #     eventBatchSize = 1000
    #     pollingInterval = 5000
    #     blockTime = 2  # Average block time in seconds
    # }
    
    # Arbitrum One
    # arbitrum {
    #     rpcUrl = "https://arb1.arbitrum.io/rpc"
    #     rpcUrl = ${?ARBITRUM_RPC_URL}
    #     batchSize = 1000
    #     eventBatchSize = 2000
    #     pollingInterval = 10000
    #     blockTime = 0.25  # Arbitrum can process multiple blocks per second
    # }
}

ktor {
    deployment {
        port = ${server.port}
        watch = [ classes, resources ]
    }
    
    application {
        modules = [ fi.decentri.dataingest.ApplicationKt.configureRouting,
                    fi.decentri.dataingest.ApplicationKt.configureSerialization ]
    }
}